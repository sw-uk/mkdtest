{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkDocs PoC Demo \u00b6 Code Block\uc758 \ud45c\uc2dc \u00b6 Fenced Code Block \u00b6 #!/usr/bin $ echo \"Hello World!\" Backtick Code Block \u00b6 #!/usr/bin $ echo \"Hello World!\" Indented Code Block \u00b6 #!/usr/bin $ echo \"Hello World!\" Code Block \ub77c\uc778 \ubc88\ud638 \ud45c\uc2dc \u00b6 Line Number \ud2b9\uc815 \ucf54\ub4dc \ube14\ub7ed\uc5d0\ub9cc \uc0ac\uc6a9 \u00b6 1 2 #!/usr/bin $ echo \"Hello World!\" List \ud558\uc704\uc5d0 Code Block \ud45c\uc2dc \u00b6 First item of the list #!/usr/bin $ echo \"Hello World!\" Second item of the list <html> <head> <script src=\" \"></script> </head> </html> Note \ub0b4\ubd80\uc5d0 Code Block \ud45c\uc2dc \u00b6 code block inside note 1 2 $ echo \"test\" > text.txt $ exit Code Block\uc758 \ud2b9\uc815 \ub77c\uc778 highlight \u00b6 #!/usr/bin $ echo \"Hello World!\" $ touch example.txt Code Block title \ud45c\uc2dc \ubd88\uac00 (\ub300\uc548) \u00b6 Tab Title #!/usr/bin $ echo \"Hello World!\" $ touch example.txt","title":"Home"},{"location":"#mkdocs-poc-demo","text":"","title":"MkDocs PoC Demo"},{"location":"#code-block","text":"","title":"Code Block\uc758 \ud45c\uc2dc"},{"location":"#fenced-code-block","text":"#!/usr/bin $ echo \"Hello World!\"","title":"Fenced Code Block"},{"location":"#backtick-code-block","text":"#!/usr/bin $ echo \"Hello World!\"","title":"Backtick Code Block"},{"location":"#indented-code-block","text":"#!/usr/bin $ echo \"Hello World!\"","title":"Indented Code Block"},{"location":"#code-block_1","text":"","title":"Code Block \ub77c\uc778 \ubc88\ud638 \ud45c\uc2dc"},{"location":"#line-number","text":"1 2 #!/usr/bin $ echo \"Hello World!\"","title":"Line Number \ud2b9\uc815 \ucf54\ub4dc \ube14\ub7ed\uc5d0\ub9cc \uc0ac\uc6a9"},{"location":"#list-code-block","text":"First item of the list #!/usr/bin $ echo \"Hello World!\" Second item of the list <html> <head> <script src=\" \"></script> </head> </html>","title":"List \ud558\uc704\uc5d0 Code Block \ud45c\uc2dc"},{"location":"#note-code-block","text":"code block inside note 1 2 $ echo \"test\" > text.txt $ exit","title":"Note \ub0b4\ubd80\uc5d0 Code Block \ud45c\uc2dc"},{"location":"#code-block-highlight","text":"#!/usr/bin $ echo \"Hello World!\" $ touch example.txt","title":"Code Block\uc758 \ud2b9\uc815 \ub77c\uc778 highlight"},{"location":"#code-block-title","text":"Tab Title #!/usr/bin $ echo \"Hello World!\" $ touch example.txt","title":"Code Block title \ud45c\uc2dc \ubd88\uac00 (\ub300\uc548)"},{"location":"introduction-to-ls2-api/","text":"LS2 API is a JSON-based API provided by webOS platform services. You can use LS2 API to create apps or services that use webOS platform features. This page explains the basic concepts of LS2 API using the example of com.webos.service.systemservice , which provides access to system settings such as preferences and time/time zone information. Key Terminology \u00b6 The following outlines the key terms and concepts that you will come across while using LS2 API. Service URI \u00b6 A service URI is a unique address that makes each platform service accessible via Luna Bus . A service URI follows the format of luna://<service name> . Therefore, the clients (other apps or services) can make a request to com.webos.service.systemservice using the address luna://com.webos.service.systemservice . Method \u00b6 Each service provides one or more methods that are categorized by the feature they provide. Methods common to the service are grouped under the root category, whereas methods related to a specific feature are grouped under the relevant category. com.webos.service.systemservice provides the following methods to retrieve or set system preference values, which are grouped under the root category. getPreferences setPreferences In addition, com.webos.service.systemservice provides time-based methods, which are grouped under the time category. For instance, you can retrieve or set the system time using the following methods: time/getSystemTime time/setSystemTime Parameter \u00b6 Parameters are service request options and are passed as a JSON object. Parameters consist of a set of properties required for the service request as well as a few reserved properties that are common to all service requests. One example of such reserved properties is the subscribe property, which can be sent to services that allow subscriptions. If the subscription is successful, the service will return subscription responses either at periodic intervals or when its data is updated. The following describes the parameters for time-based methods of com.webos.service.systemservice . time/getSystemTime The method does not require any input parameters. As an optional parameter, subscribe property can be sent. time/setSystemTime The method requires utc (Coordinated Universal Time) as an input parameter. As an optional parameter, timestamp object can be sent. Call Response \u00b6 A call response is a JSON object containing the service's response data to a method call. It has a reserved property returnValue to indicate the success or failure of a call. If returnValue is true, the call is a success and the response object might have additional properties depending on the API call being made. If the subscribe property in the parameters was set to true, the response object will return a property subscribed to indicate the success or failure of the subscription. If subscribed is true , it indicates that the subscription was a success. If returnValue is false, it means the call failed and the response object might contain further properties such as errorCode and errorText that give more information about the error. Subscription Response \u00b6 A subscription response is a JSON object containing the service's response data to a subscription. It has two reserved properties subscribed and returnValue , where subscribed indicates the status of subscription and returnValue indicates the status of operation. Basics of Using LS2 API \u00b6 This section explains the basics of how to use LS2 API. Invoking a Method \u00b6 Clients can make a request to a platform service using methods. In return to the request, the service provides a call response in JSON format. The following shows an example of calling the time/getSystemTime method, using the luna-send command. The luna-send command accepts the complete method URI as its argument, which follows the format of <service URI>/<method name> . In case of the time/getSystemTime method, the method URI becomes luna://com.webos.service.systemservice/time/getSystemTime . $ luna-send -n 1 -f luna://com.webos.service.systemservice/time/getSystemTime '{}' Call response: { \"timezone\" : \"Asia/Seoul\" , \"returnValue\" : true, \"utc\" : 1557280839 , \"localtime\" : { \"month\" : 5 , \"day\" : 8 , \"hour\" : 11 , \"minute\" : 0 , \"year\" : 2019 , \"second\" : 39 } , \"TZ\" : \"KST\" , \"systemTimeSource\" : \"ntp\" , \"timestamp\" : { \"source\" : \"monotonic\" , \"sec\" : 730 , \"nsec\" : 472935963 } , \"timeZoneFile\" : \"/var/luna/preferences/localtime\" , \"offset\" : 540 , \"isDST\" : false } Note Empty curly braces ( '{}' ) after the method URI indicate that no parameters are passed to the method. Subscribing for Notifications \u00b6 Clients can subscribe for notifications of some methods. In this case, the client makes a subscription request for the method and gets notified when any updates are available. This works well for operations where the information is likely to change and where the client needs the latest information. Note In most cases, subscription is only supported on methods that accept the subscribe parameter. However, some methods are subscription-only, meaning that they are automatically subscribed and do not have the subscribe parameter. The following shows an example of subscribing to the time/getSystemTime method, using the luna-send command. To test subscription with the luna-send command, use -i option for interactive mode. $ luna-send -i -f luna://com.webos.service.systemservice/time/getSystemTime '{\"subscribe\": true}' Call response: { \"timezone\" : \"Asia/Seoul\" , \"returnValue\" : true, \"utc\" : 1561617075 , \"localtime\" : { \"month\" : 6 , \"day\" : 27 , \"hour\" : 15 , \"minute\" : 31 , \"year\" : 2019 , \"second\" : 15 } , \"subscribed\" : true, \"TZ\" : \"KST\" , \"systemTimeSource\" : \"ntp\" , ... } By setting the subscribe parameter to true , the client subscribes to the time/getSystemTime method in order to get notifications in the following situations: When the system time changes by more than the system-defined threshold (5 minutes) When the time zone changes If you make one of the above changes in the Settings app, subscription responses will be received as follows: System time changed Subscription response: { \"timezone\" : \"Asia/Seoul\" , \"NITZValidZone\" : false, \"utc\" : 1561614000 , \"localtime\" : { \"month\" : 6 , \"day\" : 27 , \"hour\" : 14 , \"minute\" : 40 , \"year\" : 2019 , \"second\" : 0 } , \"TZ\" : \"KST\" , \"systemTimeSource\" : \"manual\" , ... } Time zone changed Subscription response: { \"timezone\" : \"Asia/Dubai\" , \"NITZValidZone\" : false, \"utc\" : 1561617502 , \"localtime\" : { \"month\" : 6 , \"day\" : 27 , \"hour\" : 10 , \"minute\" : 38 , \"year\" : 2019 , \"second\" : 22 } , \"TZ\" : \"+04\" , \"systemTimeSource\" : \"ntp\" , ... } Note To exit the interactive mode of luna-send , input Ctrl+C . What's Next \u00b6 To find out how to use LS2 API in your apps or services, see the following pages: Using LS2 API in Web Apps To view the details of LS2 API, refer to LS2 API reference .","title":"Introduction to LS2 API"},{"location":"introduction-to-ls2-api/#key-terminology","text":"The following outlines the key terms and concepts that you will come across while using LS2 API.","title":"Key Terminology"},{"location":"introduction-to-ls2-api/#service-uri","text":"A service URI is a unique address that makes each platform service accessible via Luna Bus . A service URI follows the format of luna://<service name> . Therefore, the clients (other apps or services) can make a request to com.webos.service.systemservice using the address luna://com.webos.service.systemservice .","title":"Service URI"},{"location":"introduction-to-ls2-api/#method","text":"Each service provides one or more methods that are categorized by the feature they provide. Methods common to the service are grouped under the root category, whereas methods related to a specific feature are grouped under the relevant category. com.webos.service.systemservice provides the following methods to retrieve or set system preference values, which are grouped under the root category. getPreferences setPreferences In addition, com.webos.service.systemservice provides time-based methods, which are grouped under the time category. For instance, you can retrieve or set the system time using the following methods: time/getSystemTime time/setSystemTime","title":"Method"},{"location":"introduction-to-ls2-api/#parameter","text":"Parameters are service request options and are passed as a JSON object. Parameters consist of a set of properties required for the service request as well as a few reserved properties that are common to all service requests. One example of such reserved properties is the subscribe property, which can be sent to services that allow subscriptions. If the subscription is successful, the service will return subscription responses either at periodic intervals or when its data is updated. The following describes the parameters for time-based methods of com.webos.service.systemservice . time/getSystemTime The method does not require any input parameters. As an optional parameter, subscribe property can be sent. time/setSystemTime The method requires utc (Coordinated Universal Time) as an input parameter. As an optional parameter, timestamp object can be sent.","title":"Parameter"},{"location":"introduction-to-ls2-api/#call-response","text":"A call response is a JSON object containing the service's response data to a method call. It has a reserved property returnValue to indicate the success or failure of a call. If returnValue is true, the call is a success and the response object might have additional properties depending on the API call being made. If the subscribe property in the parameters was set to true, the response object will return a property subscribed to indicate the success or failure of the subscription. If subscribed is true , it indicates that the subscription was a success. If returnValue is false, it means the call failed and the response object might contain further properties such as errorCode and errorText that give more information about the error.","title":"Call Response"},{"location":"introduction-to-ls2-api/#subscription-response","text":"A subscription response is a JSON object containing the service's response data to a subscription. It has two reserved properties subscribed and returnValue , where subscribed indicates the status of subscription and returnValue indicates the status of operation.","title":"Subscription Response"},{"location":"introduction-to-ls2-api/#basics-of-using-ls2-api","text":"This section explains the basics of how to use LS2 API.","title":"Basics of Using LS2 API"},{"location":"introduction-to-ls2-api/#invoking-a-method","text":"Clients can make a request to a platform service using methods. In return to the request, the service provides a call response in JSON format. The following shows an example of calling the time/getSystemTime method, using the luna-send command. The luna-send command accepts the complete method URI as its argument, which follows the format of <service URI>/<method name> . In case of the time/getSystemTime method, the method URI becomes luna://com.webos.service.systemservice/time/getSystemTime . $ luna-send -n 1 -f luna://com.webos.service.systemservice/time/getSystemTime '{}' Call response: { \"timezone\" : \"Asia/Seoul\" , \"returnValue\" : true, \"utc\" : 1557280839 , \"localtime\" : { \"month\" : 5 , \"day\" : 8 , \"hour\" : 11 , \"minute\" : 0 , \"year\" : 2019 , \"second\" : 39 } , \"TZ\" : \"KST\" , \"systemTimeSource\" : \"ntp\" , \"timestamp\" : { \"source\" : \"monotonic\" , \"sec\" : 730 , \"nsec\" : 472935963 } , \"timeZoneFile\" : \"/var/luna/preferences/localtime\" , \"offset\" : 540 , \"isDST\" : false } Note Empty curly braces ( '{}' ) after the method URI indicate that no parameters are passed to the method.","title":"Invoking a Method"},{"location":"introduction-to-ls2-api/#subscribing-for-notifications","text":"Clients can subscribe for notifications of some methods. In this case, the client makes a subscription request for the method and gets notified when any updates are available. This works well for operations where the information is likely to change and where the client needs the latest information. Note In most cases, subscription is only supported on methods that accept the subscribe parameter. However, some methods are subscription-only, meaning that they are automatically subscribed and do not have the subscribe parameter. The following shows an example of subscribing to the time/getSystemTime method, using the luna-send command. To test subscription with the luna-send command, use -i option for interactive mode. $ luna-send -i -f luna://com.webos.service.systemservice/time/getSystemTime '{\"subscribe\": true}' Call response: { \"timezone\" : \"Asia/Seoul\" , \"returnValue\" : true, \"utc\" : 1561617075 , \"localtime\" : { \"month\" : 6 , \"day\" : 27 , \"hour\" : 15 , \"minute\" : 31 , \"year\" : 2019 , \"second\" : 15 } , \"subscribed\" : true, \"TZ\" : \"KST\" , \"systemTimeSource\" : \"ntp\" , ... } By setting the subscribe parameter to true , the client subscribes to the time/getSystemTime method in order to get notifications in the following situations: When the system time changes by more than the system-defined threshold (5 minutes) When the time zone changes If you make one of the above changes in the Settings app, subscription responses will be received as follows: System time changed Subscription response: { \"timezone\" : \"Asia/Seoul\" , \"NITZValidZone\" : false, \"utc\" : 1561614000 , \"localtime\" : { \"month\" : 6 , \"day\" : 27 , \"hour\" : 14 , \"minute\" : 40 , \"year\" : 2019 , \"second\" : 0 } , \"TZ\" : \"KST\" , \"systemTimeSource\" : \"manual\" , ... } Time zone changed Subscription response: { \"timezone\" : \"Asia/Dubai\" , \"NITZValidZone\" : false, \"utc\" : 1561617502 , \"localtime\" : { \"month\" : 6 , \"day\" : 27 , \"hour\" : 10 , \"minute\" : 38 , \"year\" : 2019 , \"second\" : 22 } , \"TZ\" : \"+04\" , \"systemTimeSource\" : \"ntp\" , ... } Note To exit the interactive mode of luna-send , input Ctrl+C .","title":"Subscribing for Notifications"},{"location":"introduction-to-ls2-api/#whats-next","text":"To find out how to use LS2 API in your apps or services, see the following pages: Using LS2 API in Web Apps To view the details of LS2 API, refer to LS2 API reference .","title":"What's Next"},{"location":"localization-guide/","text":"To reach out to the users in the global market, it is essential to provide your apps and services in many different languages. There are a few things to keep in mind when you localize your apps or services for webOS Open Source Edition (OSE). Write code using the internationalization (i18n) library provided by webOS OSE. This page provides the links to external pages with detailed information on libraries and coding rules for each programming language. Prepare multi-language string resources in the guided format. You can prepare string resources yourself, or use the localization tool to make string resources generated at build time. Locale identification in webOS OSE Locales in webOS OSE follow the BCP 47 standard. A locale is represented as a language tag, typically in language -[ script ]-[ region ] format, where the language code is a required field. For example, ko : Korean fr-FR : French - France fr-CA : French - Canada zh-Hant-HK : Chinese - Chinese Traditional - Hong Kong For more information about BCP 47 and the language tag, refer to the following: BCP 47 Format Language Tag Localization Tool \u00b6 The localization tool parses source code along with XLIFF files, and generates string resources in formats required by each programming language. Therefore, you must provide a translation data in XLIFF format to use the localization tool. XLIFF \u00b6 XLIFF (XML Localization Interchange File Format) is an XML format file that contains the actual translation data. XLIFF must exist for each locale. The following shows an example of XLIFF, which represents the translation data for ' en-US ' locale of ' javascript ' application named ' sample '. The localization tool of webOS OSE is based on XLIFF version 2.0. \"en-US.xliff\" <?xml version=\"1.0\"?> <xliff xmlns= \"urn:oasis:names:tc:xliff:document:2.0\" version= \"2.0\" srcLang= \"en-KR\" trgLang= \"en-US\" > <file id= \"sample_f1\" original= \"sample\" > <group id= \"sample_g1\" name= \"javascript\" > <unit id= \"sample_1\" > <segment> <source> String 1 </source> <target> Translation 1 </target> </segment> </unit> <unit id= \"sample_2\" > <segment> <source> String 2 </source> <target> Translation 2 </target> </segment> </unit> </group> </file> </xliff> The following table describes the key elements and attributes of XLIFF. Element/Attribute Description <xliff> - srcLang Source language - the code of the language, in which the text to be translated is expressed <xliff> - trgLang Target language - the code of the language, in which the translated text is expressed <group> - name Programming language type - \"javascript\", \"c\", \"cpp\", \"x-qml\" (for Qt/QML) <source> Source string - the text to be translated <target> Target string - the translated text XLIFF files for each locale must be placed in the directory with the same name as the module name, as shown below. \"XLIFF Directory Structure\" com.webos.app.sample \u251c\u2500\u2500 sample \u251c\u2500\u2500 af-ZA.xliff \u2502\u2500\u2500 ar-SA.xliff ... \u2502\u2500\u2500 en-GB.xliff \u2502\u2500\u2500 en-US.xliff ... \u2514\u2500\u2500 zh-Hans-CN.xliff Writing the Recipe to Use the Localization Tool \u00b6 To use the localization tool for generating string resources at build time, add a line to inherit webos_localizable bbclass to the recipe. \"sample.bb\" inherit webos_localizable For Qt/QML app, the recipe must inherit webos_qt_localization instead of webos_localizable . webos_qt_localization bbclass includes an additional process to convert a .ts file into a .qm file. \"sample.bb for QtQml\" inherit webos_qt_localization If necessary, you can change the location of XLIFF folder or XLIFF basename by redefining the values below. \"default WEBOS_LOCALIZATION_DATA_PATH and WEBOS_LOCALIZATION_XLIFF_BASENAME\" WEBOS_LOCALIZATION_DATA_PATH ? = \" ${ S } \" #The default is the value of the last dot-separated field of PN. WEBOS_LOCALIZATION_XLIFF_BASENAME ? = \" ${ @ '${BPN}' .split( '.' )[-1] } \" For example, if the package name of an application is \"com.webos.app.sample\", the basename is \"sample\". This value must match the value of original attribute and the name of the directory where XLIFF files are located. JavaScript \u00b6 For web apps developed in JavaScript, use iLib to write code for localization. Note For more information about iLib, refer to the iLib documentation . Enact Apps \u00b6 Enact framework offers $L component as part of its i18n library, which provides functions to map to translated strings. \"Example for $L usage\" import $L , { toIString } from '@enact/i18n/$L' ; $L ( 'Close' ); // => \"Close\" in the current locale toIString ( 'Close' ); // => an ilib IString representing \"Close\" in the current locale Note For more information on the functions above, refer to the Enact documentation . Non-Enact Apps \u00b6 For web apps that do not utilize Enact framework, use getString() API of ResBundle feature in iLib. First, load the iLib library ( ilib-web.js ) through the <script> tag. <html> <head> <script src=<path-to-ilib>/lib/ilib-web.js type=\"text/javascript\"></script> ... </head> </html> For instance, if you're developing a built-in web app, the iLib library can be loaded as follows: <script src=file://usr/share/javascript/ilib/lib/ilib-web.js type=\"text/javascript\"></script> After that, use ResBundle.getString() method of iLib as shown in the example below. var ResBundle = require(\"ResBundle.js\"); var rb = new ResBundle({locale: \"en-US\"}); var str = rb.getString(\"String 1\"); // str is iLib string object var jsStr = str.toString(); // jsStr is js string object Resource Format \u00b6 iLib requires string resources in JSON format. If you are not using the localization tool, create a file named strings.json and write strings for translation in key-value format. { \"String 1\" : \"Translation 1\" , \"String 2\" : \"Translation 2\" } Make sure that you prepare strings.json files for each locale under the resources directory. The directory structure is as below. com.webos.app.sample \u251c\u2500\u2500 resources \u2502 \u2514\u2500\u2500 <language> \u2502 \u251c\u2500\u2500 <script> \u2502 \u2502 \u251c\u2500\u2500 <region> \u2502 \u2502 \u2502 \u2514\u2500\u2500 strings.json \u2502 \u2502 \u2514\u2500\u2500 strings.json \u2502 \u2514\u2500\u2500 strings.json \u251c\u2500\u2500 src \u2502 For example, the strings for French-language speakers in France need to be stored in resources/fr/FR/strings.json , while the strings for French-speaking residents of Canada stored in resources/fr/CA/strings.json . Preventing the Use of Duplicate Data \u00b6 If you consider preventing the use of duplicate data, configure the structure of string resources as follows. Let's take an example of English where there may be other translation terms by region. Term en-US (English - USA) en-GB (English - United Kingdom) All All All Hello Hi Hi Color Color Colour Subway Subway Underground To avoid duplicates, configure directories and files as follows: All: If the original term and translated strings are the same, there is no need to write translations in the resource file. Hello: If the strings for en-US and en-GB are the same, write them in en/strings.json . Color, Subway: If the translations for US and UK English are different, write them in en/US/strings.json and en/GB/strings.json respectively. com.webos.app.sample \u2514\u2500\u2500 resources \u2514\u2500\u2500 en \u251c\u2500\u2500 GB \u2502 \u2514\u2500\u2500 strings.json : Colour, Underground \u251c\u2500\u2500 US \u2502 \u2514\u2500\u2500 strings.json : Color, Subway \u2514\u2500\u2500 strings.json : Hi C++/C \u00b6 If you are developing apps or services in C++/C, use libwebosi18n to write code for localization. To make the libwebosi18n library built first, add a dependency for the library to the recipe. Even for C++/C apps or services, add a line to inherit webos_localizable bbclass. ... DEPENDS = \"libwebosi18n\" ... inherit webos_localizable The following shows an example that uses getLocString() API of libwebosi18n in C++ and C. #include <webosi18n.h> std :: string locale = \"en-US\" ; const std :: string file = \"cppstrings.json\" ; const std :: string resources_path = \"/usr/share/localization/samplecpp\" ; ResBundle * resBundle = new ResBundle ( locale , file , resources_path ); resBundle -> getLocString ( \"String 1\" ); #include <webosi18n_C.h> const char * locale = \"en-US\" ; const char * file = \"cstrings.json\" ; const char * resources_path = \"/usr/share/localization/sample_c\" ; ResBundleC * resBundle = resBundle_createWithRootPath ( locale , file , resources_path ); resBundle_getLocString ( resBundle , \"String 1\" ); When writing an XLIFF file, the value of original attribute must match the basename. In addition, the value of name attribute in group must match the type of programming language used for developing the apps or services, as follows: <? xml version = \"1.0\" ?> < xliff xmlns = \"urn:oasis:names:tc:xliff:document:2.0\" version = \"2.0\" srcLang = \"en-KR\" trgLang = \"en-US\" > < file id = \"samplecpp_f1\" original = \"samplecpp\" > < group id = \"samplecpp_g1\" name = \"cpp\" > ... <? xml version = \"1.0\" ?> < xliff xmlns = \"urn:oasis:names:tc:xliff:document:2.0\" version = \"2.0\" srcLang = \"en-KR\" trgLang = \"en-US\" > < file id = \"samplec_f1\" original = \"samplec\" > < group id = \"samplec_g1\" name = \"c\" > ... To prepare string resources without using the localization tool and XLIFF, write them in JSON format just like in JavaScript. The format and directory structure are basically the same as what's described above. You can also specify the name of the JSON file, but it is recommended that you use cppstrings.json for C++ and cstrings.json for C. Qt/QML \u00b6 For Qt/QML apps, the recipe must inherit webos_qt_localization instead of webos_localizable . webos_qt_localization bbclass includes an additional process to convert a .ts file into a .qm file. inherit webos_qt_localization For Qt/QML apps, the group name is \"x-qml\". <?xml version=\"1.0\"?> <xliff xmlns= \"urn:oasis:names:tc:xliff:document:2.0\" version= \"2.0\" srcLang= \"en-KR\" trgLang= \"en-US\" > <file id= \"sampleqml_f1\" original= \"sampleqml\" > <group id= \"sampleqml_g1\" name= \"x-qml\" > ... Basically, you can follow the localization guidelines of Qt. For details, refer to the Qt documentation . If you use the localization tool, .qm files for each locale are generated in the following file name format. Format: sampleqml_[lang]_[script]_[region].qm Examples: sampleqml_en_GB.qm , sampleqml_zh_Hans_CN.qm Pseudo-Localization \u00b6 Note For the definition of pseudo-localization, refer to the Wikipedia page . When you use the localization tool, it generates the string resources for pseudo locale by default. (You do not need to add an XLIFF file for this locale.) A pseudo string is generated by processing the source string. For hard-coded strings, however, a pseudo string is not generated. The pseudo locales defined in webOS OSE are as follows. The character set differs per locale. Therefore, you can check the localization issue even before the actual translation data is updated. Pseudo Locale Description zxx-XX Includes accented Latin characters zxx-Hans-XX Includes Chinese characters zxx-Hebr-XX Includes Hebrew characters","title":"Localization Guide"},{"location":"localization-guide/#localization-tool","text":"The localization tool parses source code along with XLIFF files, and generates string resources in formats required by each programming language. Therefore, you must provide a translation data in XLIFF format to use the localization tool.","title":"Localization Tool"},{"location":"localization-guide/#xliff","text":"XLIFF (XML Localization Interchange File Format) is an XML format file that contains the actual translation data. XLIFF must exist for each locale. The following shows an example of XLIFF, which represents the translation data for ' en-US ' locale of ' javascript ' application named ' sample '. The localization tool of webOS OSE is based on XLIFF version 2.0. \"en-US.xliff\" <?xml version=\"1.0\"?> <xliff xmlns= \"urn:oasis:names:tc:xliff:document:2.0\" version= \"2.0\" srcLang= \"en-KR\" trgLang= \"en-US\" > <file id= \"sample_f1\" original= \"sample\" > <group id= \"sample_g1\" name= \"javascript\" > <unit id= \"sample_1\" > <segment> <source> String 1 </source> <target> Translation 1 </target> </segment> </unit> <unit id= \"sample_2\" > <segment> <source> String 2 </source> <target> Translation 2 </target> </segment> </unit> </group> </file> </xliff> The following table describes the key elements and attributes of XLIFF. Element/Attribute Description <xliff> - srcLang Source language - the code of the language, in which the text to be translated is expressed <xliff> - trgLang Target language - the code of the language, in which the translated text is expressed <group> - name Programming language type - \"javascript\", \"c\", \"cpp\", \"x-qml\" (for Qt/QML) <source> Source string - the text to be translated <target> Target string - the translated text XLIFF files for each locale must be placed in the directory with the same name as the module name, as shown below. \"XLIFF Directory Structure\" com.webos.app.sample \u251c\u2500\u2500 sample \u251c\u2500\u2500 af-ZA.xliff \u2502\u2500\u2500 ar-SA.xliff ... \u2502\u2500\u2500 en-GB.xliff \u2502\u2500\u2500 en-US.xliff ... \u2514\u2500\u2500 zh-Hans-CN.xliff","title":"XLIFF"},{"location":"localization-guide/#writing-the-recipe-to-use-the-localization-tool","text":"To use the localization tool for generating string resources at build time, add a line to inherit webos_localizable bbclass to the recipe. \"sample.bb\" inherit webos_localizable For Qt/QML app, the recipe must inherit webos_qt_localization instead of webos_localizable . webos_qt_localization bbclass includes an additional process to convert a .ts file into a .qm file. \"sample.bb for QtQml\" inherit webos_qt_localization If necessary, you can change the location of XLIFF folder or XLIFF basename by redefining the values below. \"default WEBOS_LOCALIZATION_DATA_PATH and WEBOS_LOCALIZATION_XLIFF_BASENAME\" WEBOS_LOCALIZATION_DATA_PATH ? = \" ${ S } \" #The default is the value of the last dot-separated field of PN. WEBOS_LOCALIZATION_XLIFF_BASENAME ? = \" ${ @ '${BPN}' .split( '.' )[-1] } \" For example, if the package name of an application is \"com.webos.app.sample\", the basename is \"sample\". This value must match the value of original attribute and the name of the directory where XLIFF files are located.","title":"Writing the Recipe to Use the Localization Tool"},{"location":"localization-guide/#javascript","text":"For web apps developed in JavaScript, use iLib to write code for localization. Note For more information about iLib, refer to the iLib documentation .","title":"JavaScript"},{"location":"localization-guide/#enact-apps","text":"Enact framework offers $L component as part of its i18n library, which provides functions to map to translated strings. \"Example for $L usage\" import $L , { toIString } from '@enact/i18n/$L' ; $L ( 'Close' ); // => \"Close\" in the current locale toIString ( 'Close' ); // => an ilib IString representing \"Close\" in the current locale Note For more information on the functions above, refer to the Enact documentation .","title":"Enact Apps"},{"location":"localization-guide/#non-enact-apps","text":"For web apps that do not utilize Enact framework, use getString() API of ResBundle feature in iLib. First, load the iLib library ( ilib-web.js ) through the <script> tag. <html> <head> <script src=<path-to-ilib>/lib/ilib-web.js type=\"text/javascript\"></script> ... </head> </html> For instance, if you're developing a built-in web app, the iLib library can be loaded as follows: <script src=file://usr/share/javascript/ilib/lib/ilib-web.js type=\"text/javascript\"></script> After that, use ResBundle.getString() method of iLib as shown in the example below. var ResBundle = require(\"ResBundle.js\"); var rb = new ResBundle({locale: \"en-US\"}); var str = rb.getString(\"String 1\"); // str is iLib string object var jsStr = str.toString(); // jsStr is js string object","title":"Non-Enact Apps"},{"location":"localization-guide/#resource-format","text":"iLib requires string resources in JSON format. If you are not using the localization tool, create a file named strings.json and write strings for translation in key-value format. { \"String 1\" : \"Translation 1\" , \"String 2\" : \"Translation 2\" } Make sure that you prepare strings.json files for each locale under the resources directory. The directory structure is as below. com.webos.app.sample \u251c\u2500\u2500 resources \u2502 \u2514\u2500\u2500 <language> \u2502 \u251c\u2500\u2500 <script> \u2502 \u2502 \u251c\u2500\u2500 <region> \u2502 \u2502 \u2502 \u2514\u2500\u2500 strings.json \u2502 \u2502 \u2514\u2500\u2500 strings.json \u2502 \u2514\u2500\u2500 strings.json \u251c\u2500\u2500 src \u2502 For example, the strings for French-language speakers in France need to be stored in resources/fr/FR/strings.json , while the strings for French-speaking residents of Canada stored in resources/fr/CA/strings.json .","title":"Resource Format"},{"location":"localization-guide/#preventing-the-use-of-duplicate-data","text":"If you consider preventing the use of duplicate data, configure the structure of string resources as follows. Let's take an example of English where there may be other translation terms by region. Term en-US (English - USA) en-GB (English - United Kingdom) All All All Hello Hi Hi Color Color Colour Subway Subway Underground To avoid duplicates, configure directories and files as follows: All: If the original term and translated strings are the same, there is no need to write translations in the resource file. Hello: If the strings for en-US and en-GB are the same, write them in en/strings.json . Color, Subway: If the translations for US and UK English are different, write them in en/US/strings.json and en/GB/strings.json respectively. com.webos.app.sample \u2514\u2500\u2500 resources \u2514\u2500\u2500 en \u251c\u2500\u2500 GB \u2502 \u2514\u2500\u2500 strings.json : Colour, Underground \u251c\u2500\u2500 US \u2502 \u2514\u2500\u2500 strings.json : Color, Subway \u2514\u2500\u2500 strings.json : Hi","title":"Preventing the Use of Duplicate Data"},{"location":"localization-guide/#cc","text":"If you are developing apps or services in C++/C, use libwebosi18n to write code for localization. To make the libwebosi18n library built first, add a dependency for the library to the recipe. Even for C++/C apps or services, add a line to inherit webos_localizable bbclass. ... DEPENDS = \"libwebosi18n\" ... inherit webos_localizable The following shows an example that uses getLocString() API of libwebosi18n in C++ and C. #include <webosi18n.h> std :: string locale = \"en-US\" ; const std :: string file = \"cppstrings.json\" ; const std :: string resources_path = \"/usr/share/localization/samplecpp\" ; ResBundle * resBundle = new ResBundle ( locale , file , resources_path ); resBundle -> getLocString ( \"String 1\" ); #include <webosi18n_C.h> const char * locale = \"en-US\" ; const char * file = \"cstrings.json\" ; const char * resources_path = \"/usr/share/localization/sample_c\" ; ResBundleC * resBundle = resBundle_createWithRootPath ( locale , file , resources_path ); resBundle_getLocString ( resBundle , \"String 1\" ); When writing an XLIFF file, the value of original attribute must match the basename. In addition, the value of name attribute in group must match the type of programming language used for developing the apps or services, as follows: <? xml version = \"1.0\" ?> < xliff xmlns = \"urn:oasis:names:tc:xliff:document:2.0\" version = \"2.0\" srcLang = \"en-KR\" trgLang = \"en-US\" > < file id = \"samplecpp_f1\" original = \"samplecpp\" > < group id = \"samplecpp_g1\" name = \"cpp\" > ... <? xml version = \"1.0\" ?> < xliff xmlns = \"urn:oasis:names:tc:xliff:document:2.0\" version = \"2.0\" srcLang = \"en-KR\" trgLang = \"en-US\" > < file id = \"samplec_f1\" original = \"samplec\" > < group id = \"samplec_g1\" name = \"c\" > ... To prepare string resources without using the localization tool and XLIFF, write them in JSON format just like in JavaScript. The format and directory structure are basically the same as what's described above. You can also specify the name of the JSON file, but it is recommended that you use cppstrings.json for C++ and cstrings.json for C.","title":"C++/C"},{"location":"localization-guide/#qtqml","text":"For Qt/QML apps, the recipe must inherit webos_qt_localization instead of webos_localizable . webos_qt_localization bbclass includes an additional process to convert a .ts file into a .qm file. inherit webos_qt_localization For Qt/QML apps, the group name is \"x-qml\". <?xml version=\"1.0\"?> <xliff xmlns= \"urn:oasis:names:tc:xliff:document:2.0\" version= \"2.0\" srcLang= \"en-KR\" trgLang= \"en-US\" > <file id= \"sampleqml_f1\" original= \"sampleqml\" > <group id= \"sampleqml_g1\" name= \"x-qml\" > ... Basically, you can follow the localization guidelines of Qt. For details, refer to the Qt documentation . If you use the localization tool, .qm files for each locale are generated in the following file name format. Format: sampleqml_[lang]_[script]_[region].qm Examples: sampleqml_en_GB.qm , sampleqml_zh_Hans_CN.qm","title":"Qt/QML"},{"location":"localization-guide/#pseudo-localization","text":"Note For the definition of pseudo-localization, refer to the Wikipedia page . When you use the localization tool, it generates the string resources for pseudo locale by default. (You do not need to add an XLIFF file for this locale.) A pseudo string is generated by processing the source string. For hard-coded strings, however, a pseudo string is not generated. The pseudo locales defined in webOS OSE are as follows. The character set differs per locale. Therefore, you can check the localization issue even before the actual translation data is updated. Pseudo Locale Description zxx-XX Includes accented Latin characters zxx-Hans-XX Includes Chinese characters zxx-Hebr-XX Includes Hebrew characters","title":"Pseudo-Localization"},{"location":"setting-logging-context-level/","text":"To check or control the system-wide logging context and level, you can use the PmLogCtl command on the target. With this command, you can see the logging level of contexts or limit the log output according to your needs by adjusting the logging level of specific contexts. This page explains how to use the PmLogCtl command with examples. Logging Levels \u00b6 The table below shows a list of logging levels that can be set by PmLogCtl . The default level is \"info\". Level Remarks 0 or \"emerg\" Emergency 1 or \"alert\" Alert 2 or \"crit\" Critical 3 or \"err\" Error 4 or \"warning\" Warning 5 or \"notice\" Notice 6 or \"info\" Info. The default level. 7 or \"debug\" Debug Retrieving the Context Information \u00b6 To get the information of one or more contexts, use PmLogCtl with the show option. {{< code \"Syntax\" true >}} PmLogCtl show [ <context> ] # show logging context(s) {{< /code >}} The <context> can be a specific context name or GLOB. Without any context specified, information of all available contexts is returned. {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl show PmLogCtl: Context '<default-lib>' = info PmLogCtl: Context '<default>' = info PmLogCtl: Context 'ActivityManager' = info PmLogCtl: Context 'aiservice' = info PmLogCtl: Context 'AppInstallD' = info PmLogCtl: Context 'audiooutputd' = info ... PmLogCtl: Context 'wam.log' = info PmLogCtl: Context 'webos-bluetooth-service' = info PmLogCtl: Context 'webos-connman-adapter' = info PmLogCtl: Context 'webos-service' = info {{< /code >}} With a specific context name or GLOB specified, the information of the corresponding context(s) is returned. {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl show wam.log PmLogCtl: Context 'wam.log' = info root@raspberrypi4:/# PmLogCtl show webos* PmLogCtl: Context 'webos-bluetooth-service' = info PmLogCtl: Context 'webos-connman-adapter' = info PmLogCtl: Context 'webos-service' = info {{< /code >}} Setting the Logging Level of Contexts \u00b6 To set the logging level of one or more contexts, use PmLogCtl with the set option. {{< code \"Syntax\" true >}} PmLogCtl set <context> <level> # set logging level of context(s) {{< /code >}} The <context> can be a specific context name or GLOB. Suppose you want to set the logging level of the wam.log context to debug . This will let you see all the messages that have been logged for wam.log . {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl set wam.log debug PmLogCtl: Setting context level for 'wam.log' . root@raspberrypi4:/# PmLogCtl show wam.log PmLogCtl: Context 'wam.log' = debug {{< /code >}} On the other hand, if you want to suppress the logging level of uMediaServer(ums)-related contexts to crit (Critical), you can use the following command. {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl set ums* crit PmLogCtl: Setting context level for 'ums.connector' . PmLogCtl: Setting context level for 'ums.media_display_controller' . PmLogCtl: Setting context level for 'ums.pipeline_ctrl' . PmLogCtl: Setting context level for 'ums.pipeline_mgr' . PmLogCtl: Setting context level for 'ums.process_ctrl' . PmLogCtl: Setting context level for 'ums.resource_mgr' . PmLogCtl: Setting context level for 'ums.server' . PmLogCtl: Setting context level for 'ums.videooutput' . root@raspberrypi4:/# PmLogCtl show ums* PmLogCtl: Context 'ums.connector' = crit PmLogCtl: Context 'ums.media_display_controller' = crit PmLogCtl: Context 'ums.pipeline_ctrl' = crit PmLogCtl: Context 'ums.pipeline_mgr' = crit PmLogCtl: Context 'ums.process_ctrl' = crit PmLogCtl: Context 'ums.resource_mgr' = crit PmLogCtl: Context 'ums.server' = crit PmLogCtl: Context 'ums.videooutput' = crit {{< /code >}}","title":"Setting the logging context and level"},{"location":"setting-logging-context-level/#logging-levels","text":"The table below shows a list of logging levels that can be set by PmLogCtl . The default level is \"info\". Level Remarks 0 or \"emerg\" Emergency 1 or \"alert\" Alert 2 or \"crit\" Critical 3 or \"err\" Error 4 or \"warning\" Warning 5 or \"notice\" Notice 6 or \"info\" Info. The default level. 7 or \"debug\" Debug","title":"Logging Levels"},{"location":"setting-logging-context-level/#retrieving-the-context-information","text":"To get the information of one or more contexts, use PmLogCtl with the show option. {{< code \"Syntax\" true >}} PmLogCtl show [ <context> ] # show logging context(s) {{< /code >}} The <context> can be a specific context name or GLOB. Without any context specified, information of all available contexts is returned. {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl show PmLogCtl: Context '<default-lib>' = info PmLogCtl: Context '<default>' = info PmLogCtl: Context 'ActivityManager' = info PmLogCtl: Context 'aiservice' = info PmLogCtl: Context 'AppInstallD' = info PmLogCtl: Context 'audiooutputd' = info ... PmLogCtl: Context 'wam.log' = info PmLogCtl: Context 'webos-bluetooth-service' = info PmLogCtl: Context 'webos-connman-adapter' = info PmLogCtl: Context 'webos-service' = info {{< /code >}} With a specific context name or GLOB specified, the information of the corresponding context(s) is returned. {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl show wam.log PmLogCtl: Context 'wam.log' = info root@raspberrypi4:/# PmLogCtl show webos* PmLogCtl: Context 'webos-bluetooth-service' = info PmLogCtl: Context 'webos-connman-adapter' = info PmLogCtl: Context 'webos-service' = info {{< /code >}}","title":"Retrieving the Context Information"},{"location":"setting-logging-context-level/#setting-the-logging-level-of-contexts","text":"To set the logging level of one or more contexts, use PmLogCtl with the set option. {{< code \"Syntax\" true >}} PmLogCtl set <context> <level> # set logging level of context(s) {{< /code >}} The <context> can be a specific context name or GLOB. Suppose you want to set the logging level of the wam.log context to debug . This will let you see all the messages that have been logged for wam.log . {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl set wam.log debug PmLogCtl: Setting context level for 'wam.log' . root@raspberrypi4:/# PmLogCtl show wam.log PmLogCtl: Context 'wam.log' = debug {{< /code >}} On the other hand, if you want to suppress the logging level of uMediaServer(ums)-related contexts to crit (Critical), you can use the following command. {{< code \"Example\" true >}} root@raspberrypi4:/# PmLogCtl set ums* crit PmLogCtl: Setting context level for 'ums.connector' . PmLogCtl: Setting context level for 'ums.media_display_controller' . PmLogCtl: Setting context level for 'ums.pipeline_ctrl' . PmLogCtl: Setting context level for 'ums.pipeline_mgr' . PmLogCtl: Setting context level for 'ums.process_ctrl' . PmLogCtl: Setting context level for 'ums.resource_mgr' . PmLogCtl: Setting context level for 'ums.server' . PmLogCtl: Setting context level for 'ums.videooutput' . root@raspberrypi4:/# PmLogCtl show ums* PmLogCtl: Context 'ums.connector' = crit PmLogCtl: Context 'ums.media_display_controller' = crit PmLogCtl: Context 'ums.pipeline_ctrl' = crit PmLogCtl: Context 'ums.pipeline_mgr' = crit PmLogCtl: Context 'ums.process_ctrl' = crit PmLogCtl: Context 'ums.resource_mgr' = crit PmLogCtl: Context 'ums.server' = crit PmLogCtl: Context 'ums.videooutput' = crit {{< /code >}}","title":"Setting the Logging Level of Contexts"}]}